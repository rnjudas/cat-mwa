#!/bin/sh

#################
##Script Params##
#################

# For debugging use iptables -v.
	IP4TABLES="/sbin/iptables"
	IP6TABLES="/sbin/ip6tables"
	MODPROBE="/sbin/modprobe"
	RMMOD="/sbin/rmmod"

# Logging options.
#------------------------------------------------------------------------------
	LOG="LOG --log-level debug --log-tcp-sequence --log-tcp-options"
	LOG="$LOG --log-ip-options"

# Defaults for rate limiting
#------------------------------------------------------------------------------
#RLIMIT="-m limit --limit 3/s --limit-burst 8"

# Load required kernel modules
#------------------------------------------------------------------------------
	######
	#IPv4#
	######
		# Load required kernel modules
			$MODPROBE ip_conntrack
			$MODPROBE ip_conntrack_ftp
			$MODPROBE ip_tables
			$MODPROBE iptable_filter
			$MODPROBE ipt_LOG
			$MODPROBE ipt_state


	######
	#IPv6#
	######
		# Load required kernel modules
			$MODPROBE nf_conntrack_ipv6
			$MODPROBE ip6_tables
			$MODPROBE ip6table_filter
			$MODPROBE ip6t_LOG
			#$MODPROBE ip6_tables_state

	######
	#IPv4#
	######
		# Disable IP forwarding.
			echo 0 > /proc/sys/net/ipv4/ip_forward

			# Enable IP spoofing protection *
			for i in /proc/sys/net/ipv4/conf/*/rp_filter; do echo 1 > $i; done

			# Protect against SYN flood attacks *
			echo 1 > /proc/sys/net/ipv4/tcp_syncookies

			# Ignore all incoming ICMP echo requests *
			echo 0 > /proc/sys/net/ipv4/icmp_echo_ignore_all

			# Ignore ICMP echo requests to broadcast *
			echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts

			# Log packets with impossible addresses. *
			for i in /proc/sys/net/ipv4/conf/*/log_martians; do echo 1 > $i; done

			# Don't log invalid responses to broadcast *
			echo 1 > /proc/sys/net/ipv4/icmp_ignore_bogus_error_responses

			# Don't accept or send ICMP redirects. *
			for i in /proc/sys/net/ipv4/conf/*/accept_redirects; do echo 0 > $i; done
			for i in /proc/sys/net/ipv4/conf/*/send_redirects; do echo 0 > $i; done

			# Don't accept source routed packets. *
			for i in /proc/sys/net/ipv4/conf/*/accept_source_route; do echo 0 > $i; done

	######
	#IPv6#
	######

#################
##Script Params##
#################


#################
##Default Rules##
#################
	######
	#IPv4#
	######
		# Drop everything by default.*
			$IP4TABLES -P INPUT DROP
			$IP4TABLES -P FORWARD DROP
			$IP4TABLES -P OUTPUT DROP

		# Set the nat/mangle/raw tables' chains to ACCEPT
			$IP4TABLES -t nat -P PREROUTING ACCEPT
			$IP4TABLES -t nat -P OUTPUT ACCEPT
			$IP4TABLES -t nat -P POSTROUTING ACCEPT

			$IP4TABLES -t mangle -P PREROUTING ACCEPT
			$IP4TABLES -t mangle -P INPUT ACCEPT
			$IP4TABLES -t mangle -P FORWARD ACCEPT
			$IP4TABLES -t mangle -P OUTPUT ACCEPT
			$IP4TABLES -t mangle -P POSTROUTING ACCEPT

		# Delete all *
			$IP4TABLES -F
			$IP4TABLES -t nat -F
			$IP4TABLES -t mangle -F

		# Delete all *
			$IP4TABLES -X
			$IP4TABLES -t nat -X
			$IP4TABLES -t mangle -X

		# Zero all packets and counters. *
			$IP4TABLES -Z
			$IP4TABLES -t nat -Z
			$IP4TABLES -t mangle -Z

		# LOG packets, then ACCEPT.
			$IP4TABLES -N ACCEPTLOGIPV4
			#$IP4TABLES -A ACCEPTLOGIPV4 -j $LOG $RLIMIT --log-prefix "IPTABLESIPV4-ACCEPT "
			$IP4TABLES -A ACCEPTLOGIPV4 -j $LOG --log-prefix "IPTABLESIPV4-ACCEPT "
			$IP4TABLES -A ACCEPTLOGIPV4 -j ACCEPT

		# LOG packets, then DROP.
			$IP4TABLES -N DROPLOGIPV4
			#$IP4TABLES -A DROPLOGIPV4 -j $LOG $RLIMIT --log-prefix "IPTABLESIPV4-DROP "
			$IP4TABLES -A DROPLOGIPV4 -j $LOG --log-prefix "IPTABLESIPV4-DROP "
			$IP4TABLES -A DROPLOGIPV4 -j DROP

		# LOG packets, then REJECT.
		# TCP packets are rejected with a TCP reset.
			$IP4TABLES -N REJECTLOGIPV4
			#$IP4TABLES -A REJECTLOGIPV4 -j $LOG $RLIMIT --log-prefix "IPTABLESV4-REJECT "
			$IP4TABLES -A REJECTLOGIPV4 -j $LOG --log-prefix "IPTABLESV4-REJECT "
			$IP4TABLES -A REJECTLOGIPV4 -p tcp -j REJECT --reject-with tcp-reset
			$IP4TABLES -A REJECTLOGIPV4 -j REJECT

		######
		#IPv6#
		######
		# Drop everything by default.*
			$IP6TABLES -P INPUT DROP
			$IP6TABLES -P FORWARD DROP
			$IP6TABLES -P OUTPUT DROP

		# Set the nat/mangle/raw tables' chains to ACCEPT
			$IP6TABLES -t nat -P PREROUTING ACCEPT
			$IP6TABLES -t nat -P OUTPUT ACCEPT
			$IP6TABLES -t nat -P POSTROUTING ACCEPT

			$IP6TABLES -t mangle -P PREROUTING ACCEPT
			$IP6TABLES -t mangle -P INPUT ACCEPT
			$IP6TABLES -t mangle -P FORWARD ACCEPT
			$IP6TABLES -t mangle -P OUTPUT ACCEPT
			$IP6TABLES -t mangle -P POSTROUTING ACCEPT

		# Delete all *
			$IP6TABLES -F
			$IP6TABLES -t nat -F
			$IP6TABLES -t mangle -F

		# Delete all *
			$IP6TABLES -X
			$IP6TABLES -t nat -X
			$IP6TABLES -t mangle -X

		# Zero all packets and counters. *
			$IP6TABLES -Z
			$IP6TABLES -t nat -Z
			$IP6TABLES -t mangle -Z

		# LOG packets, then ACCEPT.
			$IP6TABLES -N ACCEPTLOGIPV6
			#$IP6TABLES -A ACCEPTLOGIPV6 -j $LOG $RLIMIT --log-prefix "IPTABLESIPV6-ACCEPT "
			$IP6TABLES -A ACCEPTLOGIPV6 -j $LOG --log-prefix "IPTABLESIPV6-ACCEPT "
			$IP6TABLES -A ACCEPTLOGIPV6 -j ACCEPT

		# LOG packets, then DROP.
			$IP6TABLES -N DROPLOGIPV6
			#$IP6TABLES -A DROPLOGIPV6 -j $LOG $RLIMIT --log-prefix "IPTABLESIPV6-DROP "
			$IP6TABLES -A DROPLOGIPV6 -j $LOG --log-prefix "IPTABLESIPV6-DROP "
			$IP6TABLES -A DROPLOGIPV6 -j DROP

		# LOG packets, then REJECT.
		# TCP packets are rejected with a TCP reset.
			$IP6TABLES -N REJECTLOGIPV6
			#$IP6TABLES -A REJECTLOGIPV6 -j $LOG $RLIMIT --log-prefix "IPTABLESIPV6-REJECT "
			$IP6TABLES -A REJECTLOGIPV6 -j $LOG --log-prefix "IPTABLESIPV6-REJECT "
			$IP6TABLES -A REJECTLOGIPV6 -p tcp -j REJECT --reject-with tcp-reset
			$IP6TABLES -A REJECTLOGIPV6 -j REJECT


#################
##Default Rules##
#################

###########################
##Allow and Drop###########
###########################

	######
	#IPv4#
	######
		# Make It Even Harder To Multi-PING
			#$IP4TABLES  -A INPUT -p icmp -m limit --limit 1/s --limit-burst 2 -j ACCEPT
			$IP4TABLES  -A INPUT -p icmp -j ACCEPT
			#$IP4TABLES  -A INPUT -p icmp -m limit --limit 1/s --limit-burst 2 -j LOG --log-prefix PING-DROP:
			$IP4TABLES  -A INPUT -p icmp -j LOG --log-prefix PING-DROP:
			$IP4TABLES  -A INPUT -p icmp -j DROP
			$IP4TABLES  -A OUTPUT -p icmp -j ACCEPT

		# First, drop all fragmented ICMP packets (almost always malicious).
			$IP4TABLES -A INPUT -p icmp --fragment -j DROPLOGIPV4
			$IP4TABLES -A OUTPUT -p icmp --fragment -j DROPLOGIPV4
			$IP4TABLES -A FORWARD -p icmp --fragment -j DROPLOGIPV4

		# Allow all ESTABLISHED ICMP traffic.
			#$IP4TABLES -A INPUT -p icmp -m state --state ESTABLISHED -j ACCEPT $RLIMIT
			#$IP4TABLES -A OUTPUT -p icmp -m state --state ESTABLISHED -j ACCEPT $RLIMIT
			$IP4TABLES -A INPUT -p icmp -m state --state ESTABLISHED -j ACCEPT
			$IP4TABLES -A OUTPUT -p icmp -m state --state ESTABLISHED -j ACCEPT

		# Allow some parts of the RELATED ICMP traffic, block the rest.
			#$IP4TABLES -A INPUT -p icmp -m state --state RELATED -j RELATED_ICMP $RLIMIT
			#$IP4TABLES -A OUTPUT -p icmp -m state --state RELATED -j RELATED_ICMP $RLIMIT

		# Allow incoming ICMP echo requests (ping), but only rate-limited.
			#$IP4TABLES -A INPUT -p icmp --icmp-type echo-request -j ACCEPT $RLIMIT
			$IP4TABLES -A INPUT -p icmp --icmp-type echo-request -j ACCEPT

		# Allow outgoing ICMP echo requests (ping), but only rate-limited.
			#$IP4TABLES -A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT $RLIMIT
			$IP4TABLES -A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT

		# Drop any other ICMP traffic.
			$IP4TABLES -A INPUT -p icmp -j DROPLOGIPV4
			$IP4TABLES -A OUTPUT -p icmp -j DROPLOGIPV4
			$IP4TABLES -A FORWARD -p icmp -j DROPLOGIPV4

		# Allow incoming connections related to existing allowed connections. *
			$IP4TABLES -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

		# Allow outgoing connections EXCEPT invalid *
			$IP4TABLES -A OUTPUT -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT

		# We don't care about Microsoft, Drop SMB/CIFS/etc..
			$IP4TABLES -A INPUT -p tcp -m multiport --dports 135,137,138,139,445,1433,1434 -j DROP
			$IP4TABLES -A INPUT -p udp -m multiport --dports 135,137,138,139,445,1433,1434 -j DROP

			# Explicitly drop invalid incoming traffic
			$IP4TABLES -A INPUT -m state --state INVALID -j DROP

		# Drop invalid outgoing traffic, too.
			$IP4TABLES -A OUTPUT -m state --state INVALID -j DROP

		# If we would use NAT, INVALID packets would pass - BLOCK them anyways
			$IP4TABLES -A FORWARD -m state --state INVALID -j DROP

		# PORT Scanners (stealth also)
			$IP4TABLES -A INPUT -m state --state NEW -p tcp --tcp-flags ALL ALL -j DROP
			$IP4TABLES -A INPUT -m state --state NEW -p tcp --tcp-flags ALL NONE -j DROP

		# Some  anti-spoofing rules
			$IP4TABLES -N SYN_FLOOD
			$IP4TABLES -A INPUT -p tcp --syn -j SYN_FLOOD
			#$IP4TABLES -A SYN_FLOOD -m limit --limit 2/s --limit-burst 6 -j RETURN
			$IP4TABLES -A SYN_FLOOD -j RETURN
			$IP4TABLES -A SYN_FLOOD -j DROP

		# Block bullshit networks
			$IP4TABLES -A INPUT -s 10.0.0.0/8       -j DROP                                # (Spoofed network)
			$IP4TABLES -A INPUT -s 192.0.0.1/24     -j DROP                                # (Spoofed network)
			$IP4TABLES -A INPUT -s 169.254.0.0/16   -j DROP                                # (Spoofed network)
			$IP4TABLES -A INPUT -s 172.16.0.0/12    -j DROP                                # (Spoofed network)
			$IP4TABLES -A INPUT -s 224.0.0.0/4      -j DROP                                # (Spoofed network)
			$IP4TABLES -A INPUT -d 224.0.0.0/4      -j DROP                                # (Spoofed network)
			$IP4TABLES -A INPUT -s 240.0.0.0/5      -j DROP                                # (Spoofed network)
			$IP4TABLES -A INPUT -d 240.0.0.0/5      -j DROP                                # (Spoofed network)
			$IP4TABLES -A INPUT -s 0.0.0.0/8        -j DROP                                # (Spoofed network)
			$IP4TABLES -A INPUT -d 0.0.0.0/8        -j DROP                                # (Spoofed network)
			$IP4TABLES -A INPUT -d 239.255.255.0/24 -j DROP                                # (Spoofed network)
			$IP4TABLES -A INPUT -d 255.255.255.255  -j DROP                                # (Spoofed network)

		# No Hack for you!
			$IP4TABLES -A INPUT -m recent --name portscan --rcheck --seconds 86400 -j DROP
			$IP4TABLES -A FORWARD -m recent --name portscan --rcheck --seconds 86400 -j DROP
			$IP4TABLES -A INPUT -m recent --name portscan --remove
			$IP4TABLES -A INPUT -p tcp -m tcp --dport 139 -m recent --name portscan --set -j LOG --log-level 4 --log-prefix "IPTABLESIPV4-Portscan:"
			$IP4TABLES -A INPUT -p tcp -m tcp --dport 139 -m recent --name portscan --set -j DROP
			$IP4TABLES -A FORWARD -p tcp -m tcp --dport 139 -m recent --name portscan --set -j LOG --log-level 4 --log-prefix "IPTABLESIPV4-Portscan:"
			$IP4TABLES -A FORWARD -p tcp -m tcp --dport 139 -m recent --name portscan --set -j DROP


	######
	#IPv6#
	######
		#BLOCK EXTENSION HEADERS
			$IP6TABLES -I INPUT 1 -i eth0 -m ipv6header --header dst --soft -j DROP
			$IP6TABLES -I INPUT 2 -i eth0 -m ipv6header --header hop --soft -j DROP
			$IP6TABLES -I INPUT 3 -i eth0 -m ipv6header --header route --soft -j DROP
			$IP6TABLES -I INPUT 4 -i eth0 -m ipv6header --header frag --soft -j DROP
			$IP6TABLES -I INPUT 5 -i eth0 -m ipv6header --header auth --soft -j DROP
			$IP6TABLES -I INPUT 6 -i eth0 -m ipv6header --header esp --soft -j DROP
			$IP6TABLES -I INPUT 7 -i eth0 -m ipv6header --header none --soft -j DROP

		# Drop packets with a type 0 routing header
			$IP6TABLES -A INPUT -m rt --rt-type 0 -j DROP
			$IP6TABLES -A OUTPUT -m rt --rt-type 0 -j DROP
			$IP6TABLES -A FORWARD -m rt --rt-type 0 -j DROP

		# Allow incoming Packet Too Big messages
			$IP6TABLES -A INPUT -p icmpv6 --icmpv6-type packet-too-big -j ACCEPT

		# Allow incoming destination unreachable messages only for existing sessions
			$IP6TABLES -A INPUT -m state -p icmpv6 --state ESTABLISHED,RELATED --icmpv6-type destination-unreachable -j ACCEPT

		# Allow incoming echo reply messages only for existing sessions
			$IP6TABLES -A INPUT -m state -p icmpv6 --state ESTABLISHED,RELATED --icmpv6-type echo-reply -j ACCEPT

		# Allow incoming time exceeded code 0 and 1 messages only for existing sessions
			$IP6TABLES -A INPUT -m state -p icmpv6 --state ESTABLISHED,RELATED --icmpv6-type ttl-zero-during-transit -j ACCEPT
			$IP6TABLES -A INPUT -m state -p icmpv6 --state ESTABLISHED,RELATED --icmpv6-type time-exceeded -j ACCEPT

		# Allow incoming parameter problem code 0 and 1 messages only for existing sessions
			$IP6TABLES -A INPUT -p icmpv6 --icmpv6-type parameter-problem -j ACCEPT

		# Allow incoming parameter problem code 1 and 2 messages for an existing session
			$IP6TABLES -A INPUT -m state -p icmpv6 --state ESTABLISHED,RELATED --icmpv6-type unknown-header-type -j ACCEPT
			$IP6TABLES -A INPUT -m state -p icmpv6 --state ESTABLISHED,RELATED --icmpv6-type unknown-option -j ACCEPT

		# Allow outgoing Packet Too Big messages
			$IP6TABLES -A OUTPUT -p icmpv6 --icmpv6-type packet-too-big -j ACCEPT

		# Allow NS/NA messages both incoming and outgoing but only if the hop limit field is 255.
			$IP6TABLES -A INPUT -p icmpv6 --icmpv6-type router-solicitation -m hl --hl-eq 255 -j ACCEPT
			$IP6TABLES -A INPUT -p icmpv6 --icmpv6-type router-advertisement -m hl --hl-eq 255 -j ACCEPT
			$IP6TABLES -A INPUT -p icmpv6 --icmpv6-type neighbor-solicitation -m hl --hl-eq 255 -j ACCEPT
			$IP6TABLES -A INPUT -p icmpv6 --icmpv6-type neighbor-advertisement -m hl --hl-eq 255 -j ACCEPT
			$IP6TABLES -A OUTPUT -p icmpv6 --icmpv6-type neighbor-solicitation -m hl --hl-eq 255 -j ACCEPT
			$IP6TABLES -A OUTPUT -p icmpv6 --icmpv6-type neighbor-advertisement -m hl --hl-eq 255  -j ACCEPT
			$IP6TABLES -A INPUT -p icmpv6 --icmpv6-type redirect -m hl --hl-eq 255 -j ACCEPT

		# Make It Even Harder To Multi-PING
			#$IP6TABLES  -A INPUT -p icmpv6 -m limit --limit 1/s --limit-burst 2 -j ACCEPT
			$IP6TABLES  -A INPUT -p icmpv6 -j ACCEPT
			#$IP6TABLES  -A INPUT -p icmpv6 -m limit --limit 1/s --limit-burst 2 -j LOG --log-prefix PING-DROP:
			$IP6TABLES  -A INPUT -p icmpv6 -j LOG --log-prefix PING-DROP:
			$IP6TABLES  -A INPUT -p icmpv6 -j DROP
			$IP6TABLES  -A OUTPUT -p icmpv6 -j ACCEPT

		# First, drop all fragmented ICMPV6 packets (almost always malicious).
			$IP6TABLES -A INPUT -m frag --fragfirst -j DROPLOGIPV6
			$IP6TABLES -A INPUT -m frag --fraglast  -j DROPLOGIPV6
			$IP6TABLES -A INPUT -m frag --fragmore  -j DROPLOGIPV6


		# Allow all ESTABLISHED ICMPV6 traffic.
			#$IP6TABLES -A INPUT -p icmpv6 -m state --state ESTABLISHED -j ACCEPT $RLIMIT
			#$IP6TABLES -A OUTPUT -p icmpv6 -m state --state ESTABLISHED -j ACCEPT $RLIMIT
			$IP6TABLES -A INPUT -p icmpv6 -m state --state ESTABLISHED -j ACCEPT
			$IP6TABLES -A OUTPUT -p icmpv6 -m state --state ESTABLISHED -j ACCEPT

		# Allow some parts of the RELATED ICMPV6 traffic, block the rest.
			#$IP6TABLES -A INPUT -p icmpv6 -m state --state RELATED -j RELATED_ICMPV6 $RLIMIT
			#$IP6TABLES -A OUTPUT -p icmpv6 -m state --state RELATED -j RELATED_ICMPV6 $RLIMIT

		# Allow incoming ICMPV6 echo requests (ping), but only rate-limited.
			#$IP6TABLES -A INPUT -p icmpv6 --icmpv6-type echo-request -j ACCEPT $RLIMIT
			#$IP6TABLES -A INPUT -p icmpv6 --icmpv6-type echo-request -j ACCEPT

		# Allow outgoing ICMPV6 echo requests (ping), but only rate-limited.
			#$IP6TABLES -A OUTPUT -p icmpv6 --icmpv6-type echo-request -j ACCEPT $RLIMIT
			#$IP6TABLES -A OUTPUT -p icmpv6 --icmpv6-type echo-request -j ACCEPT

		#DROP MULTICAST TRAFFIC GOING TO ALL-NODES LINK-LOCAL
			$IP6TABLES -A INPUT -d ff02::1 -j DROP

		# Drop any other ICMPV6 traffic.
			$IP6TABLES -A INPUT -p icmp -j DROPLOGIPV6
			$IP6TABLES -A OUTPUT -p icmp -j DROPLOGIPV6
			$IP6TABLES -A FORWARD -p icmp -j DROPLOGIPV6

		# Allow incoming connections related to existing allowed connections. *
			$IP6TABLES -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

		# Allow outgoing connections EXCEPT invalid *
			$IP6TABLES -A OUTPUT -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT

		# We don't care about Microsoft, Drop SMB/CIFS/etc..
			$IP6TABLES -A INPUT -p tcp -m multiport --dports 135,137,138,139,445,1433,1434 -j DROP
			$IP6TABLES -A INPUT -p udp -m multiport --dports 135,137,138,139,445,1433,1434 -j DROP

		# Explicitly drop invalid incoming traffic
			$IP6TABLES -A INPUT -m state --state INVALID -j DROP

		# Drop invalid outgoing traffic, too.
			$IP6TABLES -A OUTPUT -m state --state INVALID -j DROP

		# If we would use NAT, INVALID packets would pass - BLOCK them anyways
			$IP6TABLES -A FORWARD -m state --state INVALID -j DROP

		# PORT Scanners (stealth also)
			$IP6TABLES -A INPUT -m state --state NEW -p tcp --tcp-flags ALL ALL -j DROP
			$IP6TABLES -A INPUT -m state --state NEW -p tcp --tcp-flags ALL NONE -j DROP

		# Some  anti-spoofing rules
			$IP6TABLES -N SYN_FLOOD
			$IP6TABLES -A INPUT -p tcp --syn -j SYN_FLOOD
			#$IP6TABLES -A SYN_FLOOD -m limit --limit 2/s --limit-burst 6 -j RETURN
			$IP6TABLES -A SYN_FLOOD -j RETURN
			$IP6TABLES -A SYN_FLOOD -j DROP




		# Block bullshit networks
			#$IP6TABLES -A INPUT -s        -j DROP                                # (Spoofed network)
			#$IP6TABLES -A INPUT -s      -j DROP                                # (Spoofed network)
			#$IP6TABLES -A INPUT -s    -j DROP                                # (Spoofed network)
			#$IP6TABLES -A INPUT -s     -j DROP                                # (Spoofed network)
			#$IP6TABLES -A INPUT -s       -j DROP                                # (Spoofed network)
			#$IP6TABLES -A INPUT -d       -j DROP                                # (Spoofed network)
			#$IP6TABLES -A INPUT -s       -j DROP                                # (Spoofed network)
			#$IP6TABLES -A INPUT -d       -j DROP                                # (Spoofed network)
			#$IP6TABLES -A INPUT -s         -j DROP                                # (Spoofed network)
			#$IP6TABLES -A INPUT -d         -j DROP                                # (Spoofed network)
			#$IP6TABLES -A INPUT -d  -j DROP                                # (Spoofed network)
			#$IP6TABLES -A INPUT -d   -j DROP                                # (Spoofed network)

		# No Hack for you!
			$IP6TABLES -A INPUT -m recent --name portscan --rcheck --seconds 86400 -j DROP
			$IP6TABLES -A FORWARD -m recent --name portscan --rcheck --seconds 86400 -j DROP
			$IP6TABLES -A INPUT -m recent --name portscan --remove
			$IP6TABLES -A INPUT -p tcp -m tcp --dport 139 -m recent --name portscan --set -j LOG --log-level 4 --log-prefix "IPTABLESIPV6-Portscan:"
			$IP6TABLES -A INPUT -p tcp -m tcp --dport 139 -m recent --name portscan --set -j DROP
			$IP6TABLES -A FORWARD -p tcp -m tcp --dport 139 -m recent --name portscan --set -j LOG --log-level 4 --log-prefix "IPTABLESIPV6-Portscan:"
			$IP6TABLES -A FORWARD -p tcp -m tcp --dport 139 -m recent --name portscan --set -j DROP


###########################
##Allow & Drop Explicitly##
###########################



#####################
###Local Interface###
#####################

		### Allow loopback interface  TCP & UDP Incoming
			######
			#IPv4#
			######
				$IP4TABLES -A INPUT -i lo -j ACCEPT
				$IP4TABLES -A OUTPUT -o lo -p tcp -j ACCEPT
				$IP4TABLES -A OUTPUT -o lo -p udp --dport 53 -j ACCEPT

			######
			#IPv6#
			######
				$IP6TABLES -A INPUT -s ::1 -d ::1 -j ACCEPT
				$IP6TABLES -A OUTPUT -s ::1 -d ::1 -j ACCEPT

#####################
###Local Interface###
#####################


#####################
##GET FUCKING REKT###
#####################

# GET FUCKING REKT
#$IP4TABLES -A INPUT  -m state --state NEW,RELATED,ESTALISHED -j DROP
#$IP6TABLES -A INPUT  -m state --state NEW,RELATED,ESTALISHED -j DROP

#####################
##GET FUCKING REKT##
#####################


#################
####Outgoing#####
#################
			######
			#IPv4#
			######
				# Allow outgoing FTP requests. Unencrypted, use with care.
					#$IP4TABLES -A OUTPUT -m state --state NEW -p tcp --dport 21 -j ACCEPT

				# Allow outgoing SSH requests.
					#$IP4TABLES -A OUTPUT -m state --state NEW -p tcp --dport 22 -j ACCEPT

				# Allow outgoing SMTP requests. Do allow unencrypted SMTP!
					$IP4TABLES -A OUTPUT -m state --state NEW -p tcp --dport 25 -j ACCEPT

				# Allow outgoing DNS requests. Few things will work without this.
					$IP4TABLES -A OUTPUT -m state --state NEW -p udp --dport 53 -j ACCEPT

				# Allow outgoing HTTP requests. Unencrypted, use with care.
					#$IP4TABLES -A OUTPUT -m state --state NEW -p tcp --dport 80 -j ACCEPT

				# Allow outgoing HTTPS requests.
					#$IP4TABLES -A OUTPUT -m state --state NEW -p tcp --dport 443 -j ACCEPT

				# Allow outgoing SMTPS requests. Do NOT allow unencrypted SMTP!
					#$IP4TABLES -A OUTPUT -m state --state NEW -p tcp --dport 465 -j ACCEPT

				# Allow outgoing "submission" (RFC 2476) requests.
					#$IP4TABLES -A OUTPUT -m state --state NEW -p tcp --dport 587 -j ACCEPT

				# Allow outgoing MySQL requests. Unencrypted, use with care.
					#$IP4TABLES -A OUTPUT -m state --state NEW -p tcp --dport 3306 -j ACCEPT

			######
			#IPv6#
			######
				# Allow outgoing FTP requests. Unencrypted, use with care.
					#$IP6TABLES -A OUTPUT -m state --state NEW -p tcp --dport 21 -j ACCEPT

				# Allow outgoing SSH requests.
					#$IP6TABLES -A OUTPUT -m state --state NEW -p tcp --dport 22 -j ACCEPT

				# Allow outgoing SMTP requests. Do allow unencrypted SMTP!
					$IP6TABLES -A OUTPUT -m state --state NEW -p tcp --dport 25 -j ACCEPT

				# Allow outgoing DNS requests. Few things will work without this.
					$IP6TABLES -A OUTPUT -m state --state NEW -p udp --dport 53 -j ACCEPT

				# Allow outgoing HTTP requests. Unencrypted, use with care.
					#$IP6TABLES -A OUTPUT -m state --state NEW -p tcp --dport 80 -j ACCEPT

				# Allow outgoing HTTPS requests.
					#$IP6TABLES -A OUTPUT -m state --state NEW -p tcp --dport 443 -j ACCEPT

				# Allow outgoing SMTPS requests. Do NOT allow unencrypted SMTP!
					#$IP6TABLES -A OUTPUT -m state --state NEW -p tcp --dport 465 -j ACCEPT

				# Allow outgoing "submission" (RFC 2476) requests.
					#$IP6TABLES -A OUTPUT -m state --state NEW -p tcp --dport 587 -j ACCEPT

				# Allow outgoing MySQL requests. Unencrypted, use with care.
					#$IP6TABLES -A OUTPUT -m state --state NEW -p tcp --dport 3306 -j ACCEPT
#################
####Outgoing#####
#################

#################
####Incoming#####
#################
			######
			#IPv4#
			######
				# Allow incoming FTP requests.
					#$IP4TABLES -A INPUT  -m state --state NEW -p tcp --dport 21 -j ACCEPT
					#$IP4TABLES -A INPUT  -m state --state NEW -p tcp --dport 40110:60100 -j ACCEPT

				# Allow incoming SSH requests.
					$IP4TABLES -A INPUT -m state --state NEW -p tcp --dport 22 -j ACCEPT

				# Allow incoming SMTP requests.
					#$IP4TABLES -A INPUT  -s 10.104.0.0/21 -m state --state NEW -p tcp --dport 25 -j ACCEPT


				# Allow incoming RSFTP requests.
					#$IP4TABLES -A INPUT  -m state --state NEW -p tcp --dport 26 -j ACCEPT

				# Allow incoming DNS requests.
					#$IP4TABLES -A INPUT -m state --state NEW -p udp --dport 53 -j ACCEPT

				# Allow incoming HTTP requests.
					$IP4TABLES -A INPUT  -m state --state NEW -p tcp --dport 80 -j ACCEPT

				# Allow incoming POP requests.
					#$IP4TABLES -A INPUT  -m state --state NEW -p tcp --dport 110 -j ACCEPT

				# Allow incoming IMAP requests.
					#$IP4TABLES -A INPUT  -m state --state NEW -p tcp --dport 143 -j ACCEPT

				# Allow incoming SNMP requests.
					#$IP4TABLES -A INPUT  -s 0.0.0.0 -m state --state NEW  -p udp --dport 161 -j ACCEPT

				# Allow incoming HTTPS requests.
					$IP4TABLES -A INPUT  -m state --state NEW -p tcp --dport 443 -j ACCEPT

				# Allow incoming SMTPS requests. Do NOT allow unencrypted SMTP!
					#$IP4TABLES -A INPUT  -m state --state NEW -p tcp --dport 465 -j ACCEPT

				# Allow incoming "submission" (RFC 2476) requests.
					#$IP4TABLES -A INPUT  -m state --state NEW -p tcp --dport 587 -j ACCEPT

				# Allow incoming for IMAP(S) requests.
					#$IP4TABLES -A INPUT  -m state --state NEW -p tcp --dport 993 -j ACCEPT

				# Allow incoming for POP(S) requests.
					#$IP4TABLES -A INPUT  -m state --state NEW -p tcp --dport 995 -j ACCEPT

				# Allow incoming "gnunet" requests.
					#$IP4TABLES -A INPUT  -m state --state NEW -p tcp --dport 1080 -j ACCEPT

				# Allow incoming Webcache requests
					#$IP4TABLES -A INPUT  -m state --state NEW -p tcp --dport 2048 -j ACCEPT

				# Allow incoming for "trellisagt" requests.
					#$IP4TABLES -A INPUT  -m state --state NEW -p tcp --dport 2077 -j ACCEPT

				# Allow incoming for "trellisasrv" requests.
					#$IP4TABLES -A INPUT  -m state --state NEW -p tcp --dport 2078 -j ACCEPT

				# Allow incoming CPANEL requests
					#$IP4TABLES -A INPUT  -m state --state NEW -p tcp --dport 2082 -j ACCEPT

				# Allow incoming CPANEL(S) requests
					#$IP4TABLES -A INPUT  -m state --state NEW -p tcp --dport 2083 -j ACCEPT

				# Allow incoming WHM requests
					#$IP4TABLES -A INPUT  -m state --state NEW -p tcp --dport 2086 -j ACCEPT

				# Allow incoming WHM(S) requests
					#$IP4TABLES -A INPUT  -m state --state NEW -p tcp --dport 2087 -j ACCEPT

				# Allow incoming CPANEL Webmail requests
					#$IP4TABLES -A INPUT  -m state --state NEW -p tcp --dport 2095 -j ACCEPT

				# Allow incoming CPANEL Webmail(S) requests
					#$IP4TABLES -A INPUT  -m state --state NEW -p tcp --dport 2097 -j ACCEPT

				# Allow incoming MySQL requests.
					#$IP4TABLES -A INPUT  -m state --state NEW -p tcp --dport 3306 -j ACCEPT

				# Allow incoming for
					#$IP4TABLES -A INPUT  -m state --state NEW -p tcp --dport 5666 -j ACCEPT

				# Allow incoming for HTTP Reserved requests.
					#$IP4TABLES -A INPUT  -m state --state NEW -p tcp --dport 8080 -j ACCEPT

			######
			#IPv6#
			######
				# Allow incoming FTP requests.
					#$IP6TABLES -A INPUT  -m state --state NEW -p tcp --dport 21 -j ACCEPT
					#$IP6TABLES -A INPUT  -m state --state NEW -p tcp --dport 40110:60100 -j ACCEPT

				# Allow incoming SSH requests.
					$IP6TABLES -A INPUT -m state --state NEW -p tcp --dport 22 -j ACCEPT


				# Allow incoming SMTP requests.
					#$IP6TABLES -A INPUT  -s 10.104.0.0/21 -m state --state NEW -p tcp --dport 25 -j ACCEPT


				# Allow incoming RSFTP requests.
					#$IP6TABLES -A INPUT  -m state --state NEW -p tcp --dport 26 -j ACCEPT

				# Allow incoming DNS requests.
					#$IP6TABLES -A INPUT -m state --state NEW -p udp --dport 53 -j ACCEPT

				# Allow incoming HTTP requests.
					$IP6TABLES -A INPUT  -m state --state NEW -p tcp --dport 80 -j ACCEPT

				# Allow incoming POP requests.
					#$IP6TABLES -A INPUT  -m state --state NEW -p tcp --dport 110 -j ACCEPT

				# Allow incoming IMAP requests.
					#$IP6TABLES -A INPUT  -m state --state NEW -p tcp --dport 143 -j ACCEPT

				# Allow incoming SNMP requests.
					#$IP6TABLES -A INPUT  -s 0.0.0.0 -m state --state NEW  -p udp --dport 161 -j ACCEPT

				# Allow incoming HTTPS requests.
					$IP6TABLES -A INPUT  -m state --state NEW -p tcp --dport 443 -j ACCEPT

				# Allow incoming SMTPS requests. Do NOT allow unencrypted SMTP!
					#$IP6TABLES -A INPUT  -m state --state NEW -p tcp --dport 465 -j ACCEPT

				# Allow incoming "submission" (RFC 2476) requests.
					#$IP6TABLES -A INPUT  -m state --state NEW -p tcp --dport 587 -j ACCEPT

				# Allow incoming for IMAP(S) requests.
					#$IP6TABLES -A INPUT  -m state --state NEW -p tcp --dport 993 -j ACCEPT

				# Allow incoming for POP(S) requests.
					#$IP6TABLES -A INPUT  -m state --state NEW -p tcp --dport 995 -j ACCEPT

				# Allow incoming "gnunet" requests.
					#$IP6TABLES -A INPUT  -m state --state NEW -p tcp --dport 1080 -j ACCEPT

				# Allow incoming Webcache requests
					#$IP6TABLES -A INPUT  -m state --state NEW -p tcp --dport 2048 -j ACCEPT

				# Allow incoming for "trellisagt" requests.
					#$IP6TABLES -A INPUT  -m state --state NEW -p tcp --dport 2077 -j ACCEPT

				# Allow incoming for "trellisasrv" requests.
					#$IP6TABLES -A INPUT  -m state --state NEW -p tcp --dport 2078 -j ACCEPT

				# Allow incoming CPANEL requests
					#$IP6TABLES -A INPUT  -m state --state NEW -p tcp --dport 2082 -j ACCEPT

				# Allow incoming CPANEL(S) requests
					#$IP6TABLES -A INPUT  -m state --state NEW -p tcp --dport 2083 -j ACCEPT

				# Allow incoming WHM requests
					#$IP6TABLES -A INPUT  -m state --state NEW -p tcp --dport 2086 -j ACCEPT

				# Allow incoming WHM(S) requests
					#$IP6TABLES -A INPUT  -m state --state NEW -p tcp --dport 2087 -j ACCEPT

				# Allow incoming CPANEL Webmail requests
					#$IP6TABLES -A INPUT  -m state --state NEW -p tcp --dport 2095 -j ACCEPT

				# Allow incoming CPANEL Webmail(S) requests
					#$IP6TABLES -A INPUT  -m state --state NEW -p tcp --dport 2097 -j ACCEPT

				# Allow incoming MySQL requests.
					#$IP6TABLES -A INPUT  -m state --state NEW -p tcp --dport 3306 -j ACCEPT

				# Allow incoming for
					#$IP6TABLES -A INPUT  -m state --state NEW -p tcp --dport 5666 -j ACCEPT

				# Allow incoming for HTTP Reserved requests.
					#$IP6TABLES -A INPUT  -m state --state NEW -p tcp --dport 8080 -j ACCEPT
#################
####Incoming#####
#################

#################
####Monitoring###
#################

			######
			#IPv4#
			######


			######
			#IPv6#
			######

#################
####Monitoring###
#################

#################
#####Storage#####
#################
			######
			#IPv4#
			######

			######
			#IPv6#
			######

#################
#####Storage#####
#################

###########################
##Allow & Drop Explicitly##
###########################

# Explicitly log and reject everything else.
#------------------------------------------------------------------------------
# Use REJECT instead of REJECTLOGIPV4 if you don't need/want logging.
			######
			#IPv4#
			######
				$IP4TABLES -A INPUT -j REJECTLOGIPV4 -m comment --comment "IPTABLES is running"
				$IP4TABLES -A OUTPUT -j REJECTLOGIPV4 -m comment --comment "IPTABLES is running"
				$IP4TABLES -A FORWARD -j REJECTLOGIPV4 -m comment --comment "IPTABLES is running"

# Use REJECT instead of REJECTLOGIPV6 if you don't need/want logging.
			######
			#IPv6#
			######
				$IP6TABLES -A INPUT -j REJECTLOGIPV6 -m comment --comment "IPTABLES is running"
				$IP6TABLES -A OUTPUT -j REJECTLOGIPV6 -m comment --comment "IPTABLES is running"
				$IP6TABLES -A FORWARD -j REJECTLOGIPV6 -m comment --comment "IPTABLES is running"
